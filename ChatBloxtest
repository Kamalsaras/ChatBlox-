--start 1 - 23
loadstring(game:HttpGet('https://raw.githubusercontent.com/Kamalsaras/Test/main/chatbloxtest11'))()
--start24
--speed,jump,health
-- LocalScript in StarterPlayerScripts

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local player = Players.LocalPlayer
local character = player.Character
local humanoid = character and character:FindFirstChildOfClass("Humanoid")
local commandPrefix = ";"

-- Function to handle chat commands
local function onChatted(message)
    local args = message:split(" ")
    local command = args[1]:lower()
    
    if command == commandPrefix .. "jump" and tonumber(args[2]) then
        local jumpPower = tonumber(args[2])
        if humanoid then
            humanoid.JumpPower = jumpPower
        end
    elseif command == commandPrefix .. "speed" and tonumber(args[2]) then
        local walkSpeed = tonumber(args[2])
        if humanoid then
            humanoid.WalkSpeed = walkSpeed
        end
    elseif command == commandPrefix .. "health" and tonumber(args[2]) then
        local health = tonumber(args[2])
        if humanoid then
            humanoid.Health = health
        end
    elseif command == commandPrefix .. "resetstats" then
        if humanoid then
            humanoid.JumpPower = 50
            humanoid.WalkSpeed = 16
            humanoid.Health = 100
        end
    elseif command == commandPrefix .. "fill" and args[2] and args[3] and args[4] then
        local x, y, z = tonumber(args[2]), tonumber(args[3]), tonumber(args[4])
        local fillType = args[5]:lower()
        if fillType == "water" then
            local waterPart = Instance.new("Part")
            waterPart.Size = Vector3.new(10, 10, 10)
            waterPart.Position = Vector3.new(x, y, z)
            waterPart.Anchored = true
            waterPart.CanCollide = false
            waterPart.BrickColor = BrickColor.new("Bright blue")
            waterPart.Material = Enum.Material.Water
            waterPart.Parent = Workspace
        elseif fillType == "platform" then
            local platformPart = Instance.new("Part")
            platformPart.Size = Vector3.new(10, 1, 10)
            platformPart.Position = Vector3.new(x, y, z)
            platformPart.Anchored = true
            platformPart.CanCollide = true
            platformPart.BrickColor = BrickColor.new("Bright green")
            platformPart.Material = Enum.Material.SmoothPlastic
            platformPart.Parent = Workspace
        end
    end
end

-- Connect chat listener
player.Chatted:Connect(onChatted)

--start25
--swim
-- Services
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- Variables
local player = Players.LocalPlayer
local swimming = false
local oldgrav
local gravReset
local swimbeat

-- Function to start swimming
local function startSwimming()
    if not swimming and player and player.Character and player.Character:FindFirstChildWhichIsA("Humanoid") then
        oldgrav = Workspace.Gravity
        Workspace.Gravity = 0

        local swimDied = function()
            Workspace.Gravity = oldgrav
            swimming = false
        end

        local humanoid = player.Character:FindFirstChildWhichIsA("Humanoid")
        gravReset = humanoid.Died:Connect(swimDied)

        local enums = Enum.HumanoidStateType:GetEnumItems()
        table.remove(enums, table.find(enums, Enum.HumanoidStateType.None))
        for _, state in pairs(enums) do
            humanoid:SetStateEnabled(state, false)
        end

        humanoid:ChangeState(Enum.HumanoidStateType.Swimming)

        swimbeat = RunService.Heartbeat:Connect(function()
            pcall(function()
                player.Character.HumanoidRootPart.Velocity = 
                    ((humanoid.MoveDirection ~= Vector3.new() or UserInputService:IsKeyDown(Enum.KeyCode.Space))
                    and player.Character.HumanoidRootPart.Velocity or Vector3.new())
            end)
        end)

        swimming = true
    end
end

-- Function to stop swimming
local function stopSwimming()
    if player and player.Character and player.Character:FindFirstChildWhichIsA("Humanoid") then
        Workspace.Gravity = oldgrav
        swimming = false

        if gravReset then
            gravReset:Disconnect()
        end

        if swimbeat then
            swimbeat:Disconnect()
            swimbeat = nil
        end

        local humanoid = player.Character:FindFirstChildWhichIsA("Humanoid")
        local enums = Enum.HumanoidStateType:GetEnumItems()
        table.remove(enums, table.find(enums, Enum.HumanoidStateType.None))
        for _, state in pairs(enums) do
            humanoid:SetStateEnabled(state, true)
        end
    end
end

-- Handle chat commands
local function onChatted(message)
    local args = message:split(" ")
    local command = args[1]:lower()

    if command == ";swim" then
        startSwimming()
    elseif command == ";unswim" then
        stopSwimming()
    end
end

-- Connect chat listener
player.Chatted:Connect(onChatted)

--start26
--xray,coordinates
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local screenGui
local coordinatesLabel
local xrayEnabled = false
local originalTransparency = {}
local xrayObjects = {}

-- Function to create or get the coordinates display
local function getOrCreateCoordinatesDisplay()
    local gui = player:FindFirstChild("PlayerGui"):FindFirstChild("CoordinatesGUI")
    if not gui then
        gui = Instance.new("ScreenGui")
        gui.Name = "CoordinatesGUI"
        gui.ResetOnSpawn = false
        gui.Parent = player:WaitForChild("PlayerGui")

        -- Create coordinates label
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(0.2, 0, 0.1, 0)
        label.Position = UDim2.new(0, 10, 0, 10)
        label.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        label.BackgroundTransparency = 0.5
        label.TextColor3 = Color3.fromRGB(255, 255, 255)
        label.TextScaled = true
        label.Text = "Coordinates: N/A"
        label.Parent = gui
        coordinatesLabel = label
    end
    return gui
end

-- Function to update the coordinates label
local function updateCoordinates()
    if coordinatesLabel then
        local position = player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character.HumanoidRootPart.Position
        if position then
            coordinatesLabel.Text = string.format("Coordinates: X: %.2f Y: %.2f Z: %.2f", position.X, position.Y, position.Z)
        end
    end
end

-- Function to apply x-ray effect
local function applyXRayEffect(enable)
    if enable then
        -- Apply x-ray effect
        for _, obj in pairs(workspace:GetDescendants()) do
            if obj:IsA("BasePart") then
                if not originalTransparency[obj] then
                    originalTransparency[obj] = obj.Transparency
                end
                obj.Transparency = 0.8
            end
        end
    else
        -- Remove x-ray effect
        for obj, transparency in pairs(originalTransparency) do
            if obj and obj:IsA("BasePart") then
                obj.Transparency = transparency
            end
        end
        originalTransparency = {}
    end
end

-- Function to handle commands
local function onChatted(message)
    message = message:lower()
    if message == ";coordinates" then
        getOrCreateCoordinatesDisplay()
        RunService.RenderStepped:Connect(updateCoordinates)
    elseif message == ";offcoordinates" then
        local gui = player:FindFirstChild("PlayerGui"):FindFirstChild("CoordinatesGUI")
        if gui then
            gui:Destroy()
            coordinatesLabel = nil
        end
    elseif message == ";xray on" then
        applyXRayEffect(true)
    elseif message == ";xray off" then
        applyXRayEffect(false)
    end
end

-- Connect the chat function to the player's Chatted event
player.Chatted:Connect(onChatted)

--start27
-- Spin Command Script

local spinSpeed = 0
local spinning = false

local function startSpinning(speed)
    spinSpeed = speed
    spinning = true
    while spinning do
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(spinSpeed), 0)
        wait(0.1)
    end
end

local function stopSpinning()
    spinning = false
end

game.Players.LocalPlayer.Chatted:Connect(function(msg)
    local args = string.split(msg, " ")
    if args[1] == ";spin" and args[2] then
        local speed = tonumber(args[2])
        if speed then
            startSpinning(speed)
        end
    elseif args[1] == ";unspin" then
        stopSpinning()
    end
end)

--start28
--reset,hop,kickself,rejoin
local player = game.Players.LocalPlayer
local teleportService = game:GetService("TeleportService")
local placeId = game.PlaceId  -- The placeId of the current game

-- Function to reset the player's character
local function resetCharacter()
    if player.Character then
        player.Character:BreakJoints()
    end
end

-- Function to rejoin the same server
local function rejoinServer()
    teleportService:TeleportToPlaceInstance(placeId, game.JobId, player)
end

-- Function to hop to a different server
local function serverHop()
    -- Here, you might want to specify how you get a list of servers. This is a generic approach.
    -- Redirecting to the main place with a new server.
    teleportService:Teleport(placeId, player)
end

-- Function to kick the player from the server
local function kickSelf()
    player:Kick("You kicked yourself from the server.")
end

-- Listen for chat commands
player.Chatted:Connect(function(message)
    local command = message:lower()

    if command == ";reset" then
        resetCharacter()
    elseif command == ";rejoin" then
        rejoinServer()
    elseif command == ";hop" then
        serverHop()
    elseif command == ";kickself" then
        kickSelf()
    end
end)

local TweenService = game:GetService("TweenService")
local player = game.Players.LocalPlayer
local screenGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
screenGui.ResetOnSpawn = false -- Prevents UI from being removed on death/reset

-- Main UI Frame
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 400, 0, 300)
mainFrame.Position = UDim2.new(0.5, -200, 0.5, -150)
mainFrame.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
mainFrame.BorderSizePixel = 0
mainFrame.Visible = false
mainFrame.Parent = screenGui

-- Title Bar
local titleBar = Instance.new("Frame")
titleBar.Size = UDim2.new(1, 0, 0, 40)
titleBar.BackgroundColor3 = Color3.new(0.15, 0.15, 0.15)
titleBar.BorderSizePixel = 0
titleBar.Parent = mainFrame

local titleLabel = Instance.new("TextLabel")
titleLabel.Size = UDim2.new(1, 0, 1, 0)
titleLabel.BackgroundTransparency = 1
titleLabel.Text = "Test Commands"
titleLabel.TextColor3 = Color3.new(1, 1, 1)
titleLabel.Font = Enum.Font.SourceSansBold
titleLabel.TextSize = 24
titleLabel.Parent = titleBar

-- Minimize Button
local minimizeButton = Instance.new("TextButton")
minimizeButton.Size = UDim2.new(0, 40, 0, 40)
minimizeButton.Position = UDim2.new(1, -80, 0, 0)
minimizeButton.Text = "-"
minimizeButton.BackgroundColor3 = Color3.new(0.25, 0.25, 0.25)
minimizeButton.TextColor3 = Color3.new(1, 1, 1)
minimizeButton.BorderSizePixel = 0
minimizeButton.Parent = titleBar

-- Close Button
local closeButton = Instance.new("TextButton")
closeButton.Size = UDim2.new(0, 40, 0, 40)
closeButton.Position = UDim2.new(1, -40, 0, 0)
closeButton.Text = "X"
closeButton.BackgroundColor3 = Color3.new(0.25, 0.25, 0.25)
closeButton.TextColor3 = Color3.new(1, 1, 1)
closeButton.BorderSizePixel = 0
closeButton.Parent = titleBar

-- Command List (Scrolling Frame)
local scrollingFrame = Instance.new("ScrollingFrame")
scrollingFrame.Size = UDim2.new(1, -20, 1, -50)
scrollingFrame.Position = UDim2.new(0, 10, 0, 50)
scrollingFrame.CanvasSize = UDim2.new(0, 0, 10, 0) -- Adjust this as needed
scrollingFrame.ScrollBarThickness = 8
scrollingFrame.BackgroundColor3 = Color3.new(0.1, 0.1, 0.1)
scrollingFrame.BorderSizePixel = 0
scrollingFrame.Parent = mainFrame

-- Populate Commands in Scrolling Frame
local commands = {
    ";playerlist", ";openmenu", ";closemenu", ";tp <username>", ";list", ";execute", ";stats", ";info username",
    ";serverage", ";esp", ";esp off", ";bring username", ";brall", ";undobrall", ";jumpboost", ";bridge",
    ";bridgeclear", ";lookitem", ";checkinv username", ";flashstep on", ";flashstep off", ";object esp on", ";object esp off",
    ";wall on", ";wall off", ";spectate username", ";spectate end", ";clone username", ";set point", ";teleport to point",
    ";walkthrough", ";walkthrough off", ";scale", ";disablescale", ";spin <speed>", ";unspin", ";fling", ";noclip", ";clip",
    ";flip", ";swim", ";unswim", ";teleport", ";fly", ";fly <speed>", ";unfly", ";hop", ";rejoin", ";kickself", ";glitch",
    ";closeglitch", ";unglitch", ";revolve <username>", ";unrevolve", ";searchobject", ";follow <username>", ";unfollow",
    ";reset", ";antilag", ";roleinfo <username>", ";espnonvisibleobj/;envo", ";offenvo", ";light <radius> <strength>", 
    ";setp", ";tpp", ";objecttp <objectname>", ";jumpscare <username>", ";savegame", ";gravity <force>", ";night", ";day",
    ";coordinates", ";offcoordinates", ";fill <x> <y> <z> platform", ";fill <x> <y> <z> water", ";fov <value>", ";fovreset",
    ";xray on", ";xray off", ";jump <value>", ";speed <value>", ";health <value>", ";resetstats", ";hitbox <username> <size>",
    ";hitboxall <size>", ";glitch2", ";unglitch2", ";bringobj <object name>", ";pt", ";pt off", ";fog <density>", ";fogclear",
    ";fogcolor <color>", ";shake <intensity>", ";stopshake", ";donate"
}

for i, cmd in ipairs(commands) do
    local cmdLabel = Instance.new("TextLabel")
    cmdLabel.Size = UDim2.new(1, -10, 0, 30)
    cmdLabel.Position = UDim2.new(0, 5, 0, (i - 1) * 35)
    cmdLabel.BackgroundTransparency = 1
    cmdLabel.Text = cmd
    cmdLabel.TextColor3 = Color3.new(1, 1, 1)
    cmdLabel.TextSize = 20
    cmdLabel.Font = Enum.Font.SourceSans
    cmdLabel.Parent = scrollingFrame
end

scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, #commands * 35 + 5)

-- Minimized Button
local minimizedButton = Instance.new("TextButton")
minimizedButton.Size = UDim2.new(0, 50, 0, 50)
minimizedButton.Position = UDim2.new(1, -60, 0, 10)
minimizedButton.Text = "UI"
minimizedButton.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
minimizedButton.TextColor3 = Color3.new(1, 1, 1)
minimizedButton.BorderSizePixel = 0
minimizedButton.Visible = false
minimizedButton.Parent = screenGui

-- Function to show the UI
local function showUI()
    mainFrame.Visible = true
    minimizedButton.Visible = false
    local tween = TweenService:Create(mainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
        Size = UDim2.new(0, 400, 0, 300),
        Position = UDim2.new(0.5, -200, 0.5, -150)
    })
    tween:Play()
end

-- Minimize Button Functionality
minimizeButton.MouseButton1Click:Connect(function()
    local tween = TweenService:Create(mainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
        Size = UDim2.new(0, 50, 0, 50),
        Position = UDim2.new(1, -60, 0, 10)
    })
    tween:Play()
    tween.Completed:Connect(function()
        mainFrame.Visible = false
        minimizedButton.Visible = true
    end)
end)

-- Restore UI when clicking on minimized button
minimizedButton.MouseButton1Click:Connect(function()
    showUI()
end)

-- Close Button Functionality
closeButton.MouseButton1Click:Connect(function()
    local tween = TweenService:Create(mainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
        Size = UDim2.new(0, 50, 0, 50),
        Position = UDim2.new(1, -60, 0, 10)
    })
    tween:Play()
    tween.Completed:Connect(function()
        mainFrame.Visible = false
        minimizedButton.Visible = true
    end)
end)

-- Toggle UI Visibility with Chat Command
game.Players.LocalPlayer.Chatted:Connect(function(msg)
    if msg == ";test" then
        if mainFrame.Visible then
            -- Minimize UI if it is already visible
            closeButton.MouseButton1Click:Fire()  -- Trigger the close function
        else
            -- Show UI if it is not visible
            showUI()
        end
    end
end)

-- Ensure UI is available after reset or death
game.Players.LocalPlayer.CharacterAdded:Connect(function()
    if not mainFrame.Visible then
        minimizedButton.Visible = true
    end
end)

-- Dragging functionality for the main UI
local dragFrame = Instance.new("Frame")
dragFrame.Size = UDim2.new(1, 0, 1, 0)
dragFrame.BackgroundTransparency = 1
dragFrame.Active = true
dragFrame.Draggable = true
dragFrame.Parent = mainFrame

-- Dragging functionality for the minimized button
local dragMinimized = Instance.new("Frame")
dragMinimized.Size = UDim2.new(1, 0, 1, 0)
dragMinimized.BackgroundTransparency = 1
dragMinimized.Active = true
dragMinimized.Draggable = true
dragMinimized.Parent = minimizedButton

-- Ensure UI is persistent across player resets/deaths
local function recreateUI()
    -- Set the UI back to its default state
    mainFrame.Visible = false
    minimizedButton.Visible = true
end

recreateUI()

-- This event is triggered when the player resets or dies
player.CharacterAdded:Connect(function()
    wait(1)  -- Slight delay to ensure UI components have been reset
    recreateUI()
end)
